import React, { useState } from 'react';
import { FileText, Download, Edit, Send, Eye, CheckCircle, Clock, AlertCircle, Search, Filter, Calendar, User, Building, DollarSign, FileSignature as Signature, Hash, Users, Plus, X, Save, RefreshCw } from 'lucide-react';
import { PDFGenerator } from '../../utils/pdfGenerator';
import { HTMLEditor } from '../common/HTMLEditor';
import { Pagination } from '../common/Pagination';

interface Contract {
  id: string;
  number: string;
  clientId: string;
  clientName: string;
  title: string;
  content: string;
  value: number;
  startDate: string;
  endDate: string;
  status: 'draft' | 'sent' | 'signed' | 'expired';
  createdAt: string;
  signedAt?: string;
  signatureHash?: string;
  isAutoGenerated: boolean;
  services: string[];
}

interface Client {
  id: string;
  companyName: string;
  representative: string;
  email: string;
  phone: string;
  nuit: string;
  address: string;
}

interface Subscription {
  id: string;
  clientId: string;
  serviceId: string;
  serviceName: string;
  status: 'active' | 'expired' | 'cancelled';
  nextBilling: string;
  totalWithIva: number;
  startDate: string;
}

const mockClients: Client[] = [
  {
    id: '1',
    companyName: 'Transportes Maputo Lda',
    representative: 'Jo√£o Macamo',
    email: 'joao@transportesmaputo.mz',
    phone: '+258 84 123 4567',
    nuit: '400567890',
    address: 'Av. Eduardo Mondlane, 567, Maputo'
  },
  {
    id: '2',
    companyName: 'Constru√ß√µes Beira SA',
    representative: 'Maria Santos',
    email: 'maria@construcoesbeira.mz',
    phone: '+258 85 987 6543',
    nuit: '400123789',
    address: 'Rua da Independ√™ncia, 123, Beira'
  },
  {
    id: '3',
    companyName: 'Hotel Polana',
    representative: 'Carlos Mendes',
    email: 'carlos@hotelpolana.mz',
    phone: '+258 87 444 5555',
    nuit: '400111222',
    address: 'Av. Julius Nyerere, 1380, Maputo'
  }
];

const mockSubscriptions: Subscription[] = [
  {
    id: '1',
    clientId: '1',
    serviceId: '1',
    serviceName: 'Contabilidade Mensal',
    status: 'active',
    nextBilling: '2024-05-01',
    totalWithIva: 5800,
    startDate: '2024-01-01'
  },
  {
    id: '2',
    clientId: '1',
    serviceId: '2',
    serviceName: 'Auditoria Anual',
    status: 'active',
    nextBilling: '2024-12-01',
    totalWithIva: 17400,
    startDate: '2024-01-01'
  },
  {
    id: '3',
    clientId: '2',
    serviceId: '1',
    serviceName: 'Contabilidade Mensal',
    status: 'active',
    nextBilling: '2024-05-01',
    totalWithIva: 5800,
    startDate: '2024-02-01'
  },
  {
    id: '4',
    clientId: '3',
    serviceId: '3',
    serviceName: 'Consultoria Fiscal',
    status: 'expired',
    nextBilling: '2024-03-01',
    totalWithIva: 3480,
    startDate: '2023-09-01'
  }
];

const mockContracts: Contract[] = [
  {
    id: '1',
    number: 'CONT-2024-001',
    clientId: '1',
    clientName: 'Transportes Maputo Lda',
    title: 'Contrato de Presta√ß√£o de Servi√ßos Cont√°beis',
    content: `
      <h2>CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS</h2>
      <p><strong>CONTRATANTE:</strong> Transportes Maputo Lda</p>
      <p><strong>CONTRATADA:</strong> TechSolutions Lda</p>
      
      <h3>CL√ÅUSULA PRIMEIRA - DO OBJETO</h3>
      <p>O presente contrato tem por objeto a presta√ß√£o de servi√ßos de contabilidade mensal e auditoria anual.</p>
      
      <h3>CL√ÅUSULA SEGUNDA - DO VALOR</h3>
      <p>O valor total dos servi√ßos √© de <strong>23.200,00 MT</strong> (vinte e tr√™s mil e duzentos meticais).</p>
      
      <h3>CL√ÅUSULA TERCEIRA - DO PRAZO</h3>
      <p>O presente contrato ter√° vig√™ncia de 12 (doze) meses, iniciando em 01/01/2024.</p>
    `,
    value: 23200,
    startDate: '2024-01-01',
    endDate: '2024-12-31',
    status: 'signed',
    createdAt: '2024-01-01',
    signedAt: '2024-01-05',
    signatureHash: 'SHA256:a1b2c3d4e5f6...',
    isAutoGenerated: true,
    services: ['Contabilidade Mensal', 'Auditoria Anual']
  },
  {
    id: '2',
    number: 'CONT-2024-002',
    clientId: '2',
    clientName: 'Constru√ß√µes Beira SA',
    title: 'Contrato de Servi√ßos Cont√°beis',
    content: `
      <h2>CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS CONT√ÅBEIS</h2>
      <p><strong>CONTRATANTE:</strong> Constru√ß√µes Beira SA</p>
      <p><strong>CONTRATADA:</strong> TechSolutions Lda</p>
      
      <h3>OBJETO DO CONTRATO</h3>
      <p>Presta√ß√£o de servi√ßos de contabilidade mensal para a empresa contratante.</p>
      
      <h3>VALOR E FORMA DE PAGAMENTO</h3>
      <p>Valor mensal de <strong>5.800,00 MT</strong> com vencimento todo dia 05.</p>
    `,
    value: 5800,
    startDate: '2024-02-01',
    endDate: '2025-01-31',
    status: 'sent',
    createdAt: '2024-02-01',
    isAutoGenerated: true,
    services: ['Contabilidade Mensal']
  },
  {
    id: '3',
    number: 'CONT-2024-003',
    clientId: '3',
    clientName: 'Hotel Polana',
    title: 'Contrato de Consultoria Fiscal',
    content: `
      <h2>CONTRATO DE CONSULTORIA FISCAL</h2>
      <p><strong>CONTRATANTE:</strong> Hotel Polana</p>
      <p><strong>CONTRATADA:</strong> TechSolutions Lda</p>
      
      <h3>SERVI√áOS INCLU√çDOS</h3>
      <p>Consultoria especializada em quest√µes fiscais e tribut√°rias.</p>
    `,
    value: 3480,
    startDate: '2023-09-01',
    endDate: '2024-02-29',
    status: 'expired',
    createdAt: '2023-09-01',
    isAutoGenerated: false,
    services: ['Consultoria Fiscal']
  }
];

export const DigitalContracts: React.FC = () => {
  const [contracts, setContracts] = useState<Contract[]>(mockContracts);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<'all' | 'draft' | 'sent' | 'signed' | 'expired'>('all');
  const [showGenerateModal, setShowGenerateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editingContract, setEditingContract] = useState<Contract | null>(null);
  const [editContent, setEditContent] = useState('');
  const [selectedClientId, setSelectedClientId] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  const filteredContracts = contracts.filter(contract => {
    const matchesSearch = contract.clientName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         contract.number.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         contract.title.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = statusFilter === 'all' || contract.status === statusFilter;
    
    return matchesSearch && matchesStatus;
  });

  // Pagination
  const totalPages = Math.ceil(filteredContracts.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const paginatedContracts = filteredContracts.slice(startIndex, startIndex + itemsPerPage);

  // Reset to first page when filters change
  React.useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm, statusFilter]);

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('pt-PT');
  };

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      draft: { bg: 'bg-gray-100', text: 'text-gray-800', label: 'Rascunho', icon: Edit },
      sent: { bg: 'bg-blue-100', text: 'text-blue-800', label: 'Enviado', icon: Send },
      signed: { bg: 'bg-green-100', text: 'text-green-800', label: 'Assinado', icon: CheckCircle },
      expired: { bg: 'bg-red-100', text: 'text-red-800', label: 'Expirado', icon: AlertCircle }
    };
    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.draft;
    const Icon = config.icon;
    
    return (
      <span className={`px-2 py-1 text-xs font-semibold rounded-full ${config.bg} ${config.text} flex items-center gap-1`}>
        <Icon size={12} />
        {config.label}
      </span>
    );
  };

  const getClientSubscriptions = (clientId: string) => {
    return mockSubscriptions.filter(sub => sub.clientId === clientId && sub.status === 'active');
  };

  const handleGenerateContract = () => {
    if (!selectedClientId) {
      alert('Selecione um cliente primeiro');
      return;
    }

    const client = mockClients.find(c => c.id === selectedClientId);
    const clientSubscriptions = getClientSubscriptions(selectedClientId);

    if (!client) {
      alert('Cliente n√£o encontrado');
      return;
    }

    if (clientSubscriptions.length === 0) {
      alert(`‚ùå N√£o √© poss√≠vel gerar contrato!\n\nüö´ O cliente "${client.companyName}" n√£o possui subscri√ß√µes ativas.\n\nüí° Para gerar um contrato:\n1. V√° ao m√≥dulo "Subscri√ß√µes"\n2. Crie pelo menos uma subscri√ß√£o ativa\n3. Retorne aqui para gerar o contrato\n\n‚úÖ Subscri√ß√µes ativas s√£o obrigat√≥rias para contratos!`);
      return;
    }

    const totalValue = clientSubscriptions.reduce((sum, sub) => sum + sub.totalWithIva, 0);
    const serviceNames = clientSubscriptions.map(sub => sub.serviceName);
    const earliestStart = clientSubscriptions.reduce((earliest, sub) => 
      sub.startDate < earliest ? sub.startDate : earliest, 
      clientSubscriptions[0].startDate
    );
    const latestEnd = clientSubscriptions.reduce((latest, sub) => 
      sub.nextBilling > latest ? sub.nextBilling : latest, 
      clientSubscriptions[0].nextBilling
    );

    const contractContent = `
      <div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
        <h2 style="color: #2563eb; text-align: center; margin-bottom: 30px;">CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS</h2>
        
        <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
          <h3 style="color: #1e40af; margin-top: 0;">PARTES CONTRATANTES</h3>
          <p><strong>CONTRATANTE:</strong> ${client.companyName}</p>
          <p><strong>Representante:</strong> ${client.representative}</p>
          <p><strong>NUIT:</strong> ${client.nuit}</p>
          <p><strong>Endere√ßo:</strong> ${client.address}</p>
          <p><strong>Email:</strong> ${client.email}</p>
          <p><strong>Telefone:</strong> ${client.phone}</p>
          
          <hr style="margin: 15px 0; border: 1px solid #e2e8f0;">
          
          <p><strong>CONTRATADA:</strong> TechSolutions Lda</p>
          <p><strong>NUIT:</strong> 400123456</p>
          <p><strong>Endere√ßo:</strong> Av. Julius Nyerere, 123, Maputo</p>
          <p><strong>Email:</strong> info@techsolutions.mz</p>
          <p><strong>Telefone:</strong> +258 21 123 456</p>
        </div>
        
        <h3 style="color: #1e40af;">CL√ÅUSULA PRIMEIRA - DO OBJETO</h3>
        <p>O presente contrato tem por objeto a presta√ß√£o dos seguintes servi√ßos:</p>
        <ul style="background: #f1f5f9; padding: 15px; border-radius: 8px;">
          ${serviceNames.map(service => `<li><strong>${service}</strong></li>`).join('')}
        </ul>
        
        <h3 style="color: #1e40af;">CL√ÅUSULA SEGUNDA - DO VALOR E FORMA DE PAGAMENTO</h3>
        <div style="background: #ecfdf5; padding: 15px; border-radius: 8px; border-left: 4px solid #10b981;">
          <p>O valor total dos servi√ßos contratados √© de <strong style="color: #059669;">${totalValue.toLocaleString()} MT</strong> (${this.numberToWords(totalValue)}).</p>
          <p>O pagamento ser√° efetuado conforme os ciclos de cada servi√ßo, nas datas estabelecidas nas respetivas subscri√ß√µes.</p>
        </div>
        
        <h3 style="color: #1e40af;">CL√ÅUSULA TERCEIRA - DO PRAZO DE VIG√äNCIA</h3>
        <p>O presente contrato ter√° vig√™ncia de <strong>${formatDate(earliestStart)}</strong> at√© <strong>${formatDate(latestEnd)}</strong>, podendo ser renovado mediante acordo entre as partes.</p>
        
        <h3 style="color: #1e40af;">CL√ÅUSULA QUARTA - DAS OBRIGA√á√ïES DA CONTRATADA</h3>
        <ul>
          <li>Prestar os servi√ßos com qualidade e pontualidade;</li>
          <li>Manter sigilo absoluto sobre as informa√ß√µes do cliente;</li>
          <li>Cumprir os prazos estabelecidos para cada servi√ßo;</li>
          <li>Fornecer relat√≥rios peri√≥dicos quando solicitado.</li>
        </ul>
        
        <h3 style="color: #1e40af;">CL√ÅUSULA QUINTA - DAS OBRIGA√á√ïES DO CONTRATANTE</h3>
        <ul>
          <li>Efetuar os pagamentos nas datas acordadas;</li>
          <li>Fornecer toda a documenta√ß√£o necess√°ria;</li>
          <li>Comunicar altera√ß√µes relevantes em tempo h√°bil;</li>
          <li>Manter os dados de contacto atualizados.</li>
        </ul>
        
        <h3 style="color: #1e40af;">CL√ÅUSULA SEXTA - DA RESCIS√ÉO</h3>
        <p>O presente contrato poder√° ser rescindido por qualquer das partes, mediante aviso pr√©vio de 30 (trinta) dias.</p>
        
        <div style="background: #fef3c7; padding: 15px; border-radius: 8px; margin-top: 30px; text-align: center;">
          <p style="margin: 0; font-weight: bold; color: #92400e;">Contrato gerado automaticamente pelo Sistema Signius</p>
          <p style="margin: 5px 0 0 0; font-size: 12px; color: #a16207;">Data de gera√ß√£o: ${new Date().toLocaleDateString('pt-PT')}</p>
        </div>
      </div>
    `;

    const newContract: Contract = {
      id: Date.now().toString(),
      number: `CONT-2024-${String(contracts.length + 1).padStart(3, '0')}`,
      clientId: selectedClientId,
      clientName: client.companyName,
      title: `Contrato de Presta√ß√£o de Servi√ßos - ${client.companyName}`,
      content: contractContent,
      value: totalValue,
      startDate: earliestStart,
      endDate: latestEnd,
      status: 'draft',
      createdAt: new Date().toISOString(),
      isAutoGenerated: true,
      services: serviceNames
    };

    setContracts([newContract, ...contracts]);
    setShowGenerateModal(false);
    setSelectedClientId('');
    
    alert(`‚úÖ Contrato gerado automaticamente!\n\nüìÑ N√∫mero: ${newContract.number}\nüë§ Cliente: ${client.companyName}\nüõçÔ∏è Servi√ßos: ${serviceNames.length}\nüí∞ Valor Total: ${totalValue.toLocaleString()} MT\nüìÖ Vig√™ncia: ${formatDate(earliestStart)} - ${formatDate(latestEnd)}\nüìù Status: Rascunho (pronto para edi√ß√£o)\nü§ñ Gerado automaticamente com base nas subscri√ß√µes ativas`);
  };

  const handleDownloadPDF = (contract: Contract) => {
    const client = mockClients.find(c => c.id === contract.clientId);
    if (!client) {
      alert('Cliente n√£o encontrado');
      return;
    }

    // Create a temporary div to render the contract content
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = contract.content;
    tempDiv.style.padding = '20px';
    tempDiv.style.fontFamily = 'Arial, sans-serif';
    tempDiv.style.lineHeight = '1.6';
    tempDiv.style.color = '#333';
    
    // Add contract header info
    const headerInfo = document.createElement('div');
    headerInfo.innerHTML = `
      <div style="text-align: center; margin-bottom: 30px; padding: 20px; background: #f8fafc; border-radius: 8px;">
        <h1 style="color: #2563eb; margin: 0 0 10px 0;">${contract.title}</h1>
        <p style="margin: 5px 0; color: #64748b;"><strong>N√∫mero:</strong> ${contract.number}</p>
        <p style="margin: 5px 0; color: #64748b;"><strong>Data:</strong> ${formatDate(contract.createdAt)}</p>
        <p style="margin: 5px 0; color: #64748b;"><strong>Status:</strong> ${contract.status.toUpperCase()}</p>
        <p style="margin: 5px 0; color: #64748b;"><strong>Valor:</strong> ${contract.value.toLocaleString()} MT</p>
      </div>
    `;
    
    tempDiv.insertBefore(headerInfo, tempDiv.firstChild);
    
    // Add signature section if signed
    if (contract.status === 'signed' && contract.signedAt) {
      const signatureInfo = document.createElement('div');
      signatureInfo.innerHTML = `
        <div style="margin-top: 40px; padding: 20px; background: #ecfdf5; border-radius: 8px; border-left: 4px solid #10b981;">
          <h3 style="color: #059669; margin-top: 0;">ASSINATURA DIGITAL</h3>
          <p><strong>Data de Assinatura:</strong> ${formatDate(contract.signedAt)}</p>
          <p><strong>Hash de Seguran√ßa:</strong> ${contract.signatureHash}</p>
          <p style="color: #059669; font-weight: bold;">‚úì Contrato assinado digitalmente</p>
        </div>
      `;
      tempDiv.appendChild(signatureInfo);
    }
    
    document.body.appendChild(tempDiv);
    
    PDFGenerator.fromElement(tempDiv, {
      title: contract.title,
      filename: `contrato-${contract.number}.pdf`,
      orientation: 'portrait'
    }).then(() => {
      document.body.removeChild(tempDiv);
      alert(`‚úÖ PDF do contrato baixado!\n\nüìÑ Arquivo: contrato-${contract.number}.pdf\nüë§ Cliente: ${contract.clientName}\nüí∞ Valor: ${contract.value.toLocaleString()} MT\nüìÖ Baixado em: ${new Date().toLocaleString('pt-PT')}`);
    }).catch(() => {
      document.body.removeChild(tempDiv);
      alert('Erro ao gerar PDF. Tente novamente.');
    });
  };

  const handleEditContract = (contract: Contract) => {
    setEditingContract(contract);
    setEditContent(contract.content);
    setShowEditModal(true);
  };

  const handleSaveEdit = () => {
    if (!editingContract) return;

    setContracts(contracts.map(c => 
      c.id === editingContract.id 
        ? { ...c, content: editContent }
        : c
    ));
    
    setShowEditModal(false);
    setEditingContract(null);
    setEditContent('');
    
    alert(`‚úÖ Contrato "${editingContract.number}" atualizado!\n\nüìù Conte√∫do modificado com sucesso\nüìÖ Atualizado em: ${new Date().toLocaleString('pt-PT')}\nüíæ Altera√ß√µes salvas no sistema`);
  };

  const handleSendContract = (contractId: string) => {
    setContracts(contracts.map(c => 
      c.id === contractId 
        ? { ...c, status: 'sent' as const }
        : c
    ));
    
    const contract = contracts.find(c => c.id === contractId);
    alert(`‚úÖ Contrato enviado!\n\nüìß Contrato "${contract?.number}" enviado para ${contract?.clientName}\nüì® Email: ${mockClients.find(cl => cl.id === contract?.clientId)?.email}\nüìÖ Enviado em: ${new Date().toLocaleString('pt-PT')}\nüîî Cliente ser√° notificado por email`);
  };

  const handleSignContract = (contractId: string) => {
    const signatureHash = `SHA256:${Math.random().toString(36).substring(2, 15)}${Math.random().toString(36).substring(2, 15)}`;
    
    setContracts(contracts.map(c => 
      c.id === contractId 
        ? { 
            ...c, 
            status: 'signed' as const,
            signedAt: new Date().toISOString(),
            signatureHash
          }
        : c
    ));
    
    const contract = contracts.find(c => c.id === contractId);
    alert(`‚úÖ Contrato assinado digitalmente!\n\nüìÑ Contrato: ${contract?.number}\nüë§ Cliente: ${contract?.clientName}\nüîê Hash: ${signatureHash}\nüìÖ Assinado em: ${new Date().toLocaleString('pt-PT')}\n‚úÖ Assinatura v√°lida e registrada`);
  };

  const numberToWords = (num: number): string => {
    // Simplified number to words for demo
    if (num < 1000) return `${num} meticais`;
    if (num < 1000000) return `${Math.floor(num/1000)} mil e ${num%1000} meticais`;
    return `${Math.floor(num/1000000)} milh√£o e ${Math.floor((num%1000000)/1000)} mil meticais`;
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Contratos Digitais</h2>
          <p className="text-gray-600 mt-1">Gest√£o completa de contratos com assinatura digital</p>
        </div>
        <button 
          onClick={() => setShowGenerateModal(true)}
          className="bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center gap-2"
        >
          <Plus size={20} />
          Gerar Contrato
        </button>
      </div>

      {/* Status Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 mb-1">Total Contratos</p>
              <p className="text-2xl font-bold text-gray-900">{contracts.length}</p>
            </div>
            <div className="w-12 h-12 rounded-full flex items-center justify-center bg-blue-100 text-blue-600">
              <FileText size={24} />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 mb-1">Assinados</p>
              <p className="text-2xl font-bold text-gray-900">
                {contracts.filter(c => c.status === 'signed').length}
              </p>
            </div>
            <div className="w-12 h-12 rounded-full flex items-center justify-center bg-green-100 text-green-600">
              <CheckCircle size={24} />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 mb-1">Pendentes</p>
              <p className="text-2xl font-bold text-gray-900">
                {contracts.filter(c => c.status === 'sent').length}
              </p>
            </div>
            <div className="w-12 h-12 rounded-full flex items-center justify-center bg-orange-100 text-orange-600">
              <Clock size={24} />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 mb-1">Valor Total</p>
              <p className="text-2xl font-bold text-gray-900">
                {contracts.reduce((sum, c) => sum + c.value, 0).toLocaleString()} MT
              </p>
            </div>
            <div className="w-12 h-12 rounded-full flex items-center justify-center bg-emerald-100 text-emerald-600">
              <DollarSign size={24} />
            </div>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
          <input
            type="text"
            placeholder="Pesquisar contratos..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
        <select
          value={statusFilter}
          onChange={(e) => setStatusFilter(e.target.value as any)}
          className="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        >
          <option value="all">Todos os Status</option>
          <option value="draft">Rascunhos</option>
          <option value="sent">Enviados</option>
          <option value="signed">Assinados</option>
          <option value="expired">Expirados</option>
        </select>
      </div>

      {/* Contracts Table */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Contrato</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Cliente</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Valor</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Vig√™ncia</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Tipo</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">A√ß√µes</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {paginatedContracts.map((contract) => (
                <tr key={contract.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4">
                    <div>
                      <div className="text-sm font-medium text-gray-900">{contract.number}</div>
                      <div className="text-sm text-gray-500">{contract.title}</div>
                    </div>
                  </td>
                  <td className="px-6 py-4 text-sm text-gray-900">{contract.clientName}</td>
                  <td className="px-6 py-4 text-sm font-medium text-gray-900">
                    {contract.value.toLocaleString()} MT
                  </td>
                  <td className="px-6 py-4 text-sm text-gray-900">
                    <div>
                      <div>{formatDate(contract.startDate)}</div>
                      <div className="text-xs text-gray-500">at√© {formatDate(contract.endDate)}</div>
                    </div>
                  </td>
                  <td className="px-6 py-4">{getStatusBadge(contract.status)}</td>
                  <td className="px-6 py-4">
                    <span className={`px-2 py-1 text-xs font-semibold rounded-full ${
                      contract.isAutoGenerated 
                        ? 'bg-purple-100 text-purple-800' 
                        : 'bg-gray-100 text-gray-800'
                    }`}>
                      {contract.isAutoGenerated ? 'ü§ñ Auto' : '‚úèÔ∏è Manual'}
                    </span>
                  </td>
                  <td className="px-6 py-4">
                    <div className="flex gap-2">
                      <button 
                        onClick={() => handleDownloadPDF(contract)}
                        className="text-green-600 hover:text-green-900 p-1 hover:bg-green-50 rounded"
                        title="Download PDF"
                      >
                        <Download size={16} />
                      </button>
                      <button 
                        onClick={() => handleEditContract(contract)}
                        className="text-blue-600 hover:text-blue-900 p-1 hover:bg-blue-50 rounded"
                        title="Editar"
                      >
                        <Edit size={16} />
                      </button>
                      {contract.status === 'draft' && (
                        <button 
                          onClick={() => handleSendContract(contract.id)}
                          className="text-purple-600 hover:text-purple-900 p-1 hover:bg-purple-50 rounded"
                          title="Enviar"
                        >
                          <Send size={16} />
                        </button>
                      )}
                      {contract.status === 'sent' && (
                        <button 
                          onClick={() => handleSignContract(contract.id)}
                          className="text-orange-600 hover:text-orange-900 p-1 hover:bg-orange-50 rounded"
                          title="Assinar"
                        >
                          <Signature size={16} />
                        </button>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        <Pagination
          currentPage={currentPage}
          totalPages={totalPages}
          onPageChange={setCurrentPage}
          totalItems={filteredContracts.length}
          itemsPerPage={itemsPerPage}
        />
      </div>

      {/* Generate Contract Modal */}
      {showGenerateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-6 max-w-2xl w-full mx-4">
            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
              <Plus className="text-blue-600" size={20} />
              Gerar Contrato Automaticamente
            </h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Selecionar Cliente *
                </label>
                <select
                  value={selectedClientId}
                  onChange={(e) => setSelectedClientId(e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                >
                  <option value="">Escolha um cliente</option>
                  {mockClients.map((client) => (
                    <option key={client.id} value={client.id}>
                      {client.companyName} - {client.representative}
                    </option>
                  ))}
                </select>
              </div>

              {/* Preview of client subscriptions */}
              {selectedClientId && (
                <div className="bg-gray-50 rounded-lg p-4">
                  <h4 className="font-medium text-gray-900 mb-3 flex items-center gap-2">
                    <Eye className="text-blue-600" size={16} />
                    Subscri√ß√µes Ativas do Cliente
                  </h4>
                  {(() => {
                    const clientSubscriptions = getClientSubscriptions(selectedClientId);
                    const client = mockClients.find(c => c.id === selectedClientId);
                    
                    if (clientSubscriptions.length === 0) {
                      return (
                        <div className="text-center py-6">
                          <AlertCircle className="text-red-500 mx-auto mb-3" size={32} />
                          <p className="text-red-700 font-medium">Nenhuma subscri√ß√£o ativa encontrada</p>
                          <p className="text-sm text-red-600 mt-1">
                            Este cliente n√£o possui subscri√ß√µes ativas. Crie subscri√ß√µes primeiro.
                          </p>
                        </div>
                      );
                    }

                    const totalValue = clientSubscriptions.reduce((sum, sub) => sum + sub.totalWithIva, 0);
                    
                    return (
                      <div className="space-y-3">
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div>
                            <span className="text-gray-600">Cliente:</span>
                            <span className="font-medium text-gray-900 ml-2">{client?.companyName}</span>
                          </div>
                          <div>
                            <span className="text-gray-600">Total de Servi√ßos:</span>
                            <span className="font-medium text-gray-900 ml-2">{clientSubscriptions.length}</span>
                          </div>
                        </div>
                        
                        <div className="space-y-2">
                          {clientSubscriptions.map((sub) => (
                            <div key={sub.id} className="flex justify-between items-center p-2 bg-white rounded border">
                              <span className="text-sm text-gray-900">{sub.serviceName}</span>
                              <span className="text-sm font-medium text-gray-900">{sub.totalWithIva.toLocaleString()} MT</span>
                            </div>
                          ))}
                        </div>
                        
                        <div className="pt-3 border-t border-gray-200">
                          <div className="flex justify-between items-center">
                            <span className="font-medium text-gray-900">Valor Total do Contrato:</span>
                            <span className="text-lg font-bold text-blue-600">{totalValue.toLocaleString()} MT</span>
                          </div>
                        </div>
                      </div>
                    );
                  })()}
                </div>
              )}
            </div>
            
            <div className="flex gap-3 pt-6">
              <button
                onClick={() => {
                  setShowGenerateModal(false);
                  setSelectedClientId('');
                }}
                className="flex-1 border border-gray-300 text-gray-700 py-2 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancelar
              </button>
              <button
                onClick={handleGenerateContract}
                disabled={!selectedClientId || getClientSubscriptions(selectedClientId).length === 0}
                className="flex-1 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Gerar Contrato
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Edit Contract Modal */}
      {showEditModal && editingContract && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl max-w-6xl w-full mx-4 h-[90vh] flex flex-col">
            {/* Header */}
            <div className="p-6 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                    <Edit className="text-blue-600" size={20} />
                    Editando: {editingContract.number}
                  </h3>
                  <p className="text-sm text-gray-600">
                    Cliente: {editingContract.clientName} ‚Ä¢ 
                    {editingContract.isAutoGenerated ? ' Gerado automaticamente' : ' Criado manualmente'}
                  </p>
                </div>
                <div className="flex gap-3">
                  <button
                    onClick={() => {
                      setShowEditModal(false);
                      setEditingContract(null);
                      setEditContent('');
                    }}
                    className="border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 transition-colors"
                  >
                    Cancelar
                  </button>
                  <button
                    onClick={handleSaveEdit}
                    className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2"
                  >
                    <Save size={16} />
                    Salvar Altera√ß√µes
                  </button>
                </div>
              </div>
            </div>

            {/* Content */}
            <div className="flex-1 flex">
              {/* Editor */}
              <div className="flex-1 p-6">
                <HTMLEditor
                  value={editContent}
                  onChange={setEditContent}
                  placeholder="Conte√∫do do contrato..."
                  height="500px"
                />
              </div>

              {/* Contract Info Panel */}
              <div className="w-80 bg-gray-50 border-l border-gray-200 p-6">
                <h4 className="font-semibold text-gray-900 mb-4">Informa√ß√µes do Contrato</h4>
                
                <div className="space-y-4">
                  <div>
                    <label className="text-sm text-gray-600">N√∫mero</label>
                    <p className="font-medium text-gray-900">{editingContract.number}</p>
                  </div>
                  
                  <div>
                    <label className="text-sm text-gray-600">Cliente</label>
                    <p className="font-medium text-gray-900">{editingContract.clientName}</p>
                  </div>
                  
                  <div>
                    <label className="text-sm text-gray-600">Valor</label>
                    <p className="font-medium text-gray-900">{editingContract.value.toLocaleString()} MT</p>
                  </div>
                  
                  <div>
                    <label className="text-sm text-gray-600">Vig√™ncia</label>
                    <p className="font-medium text-gray-900">
                      {formatDate(editingContract.startDate)} - {formatDate(editingContract.endDate)}
                    </p>
                  </div>
                  
                  <div>
                    <label className="text-sm text-gray-600">Status</label>
                    <div className="mt-1">{getStatusBadge(editingContract.status)}</div>
                  </div>
                  
                  <div>
                    <label className="text-sm text-gray-600">Tipo</label>
                    <p className="font-medium text-gray-900">
                      {editingContract.isAutoGenerated ? 'ü§ñ Gerado Automaticamente' : '‚úèÔ∏è Criado Manualmente'}
                    </p>
                  </div>
                  
                  {editingContract.services.length > 0 && (
                    <div>
                      <label className="text-sm text-gray-600">Servi√ßos Inclu√≠dos</label>
                      <div className="mt-1 space-y-1">
                        {editingContract.services.map((service, idx) => (
                          <div key={idx} className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">
                            {service}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {editingContract.signatureHash && (
                    <div>
                      <label className="text-sm text-gray-600">Hash de Assinatura</label>
                      <p className="font-mono text-xs text-gray-900 break-all">
                        {editingContract.signatureHash}
                      </p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};