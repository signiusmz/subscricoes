import React, { useState } from 'react';
import { 
  FileText, 
  Plus, 
  Search, 
  Filter, 
  Eye, 
  Edit, 
  Download, 
  Send, 
  CheckCircle, 
  Clock, 
  AlertCircle,
  User,
  Calendar,
  DollarSign,
  Building,
  Trash2,
  Save,
  X,
  PenTool,
  Shield,
  Hash,
  Smartphone,
  Mail,
  Users,
  Activity,
  Target,
  Zap
} from 'lucide-react';
import { PDFGenerator } from '../../utils/pdfGenerator';
import { HTMLEditor } from '../common/HTMLEditor';
import { Pagination } from '../common/Pagination';

interface Contract {
  id: string;
  number: string;
  clientId: string;
  clientName: string;
  title: string;
  content: string;
  value: number;
  status: 'draft' | 'sent' | 'signed' | 'cancelled';
  createdAt: string;
  sentAt?: string;
  signedAt?: string;
  signerName?: string;
  signerEmail?: string;
  signatureHash?: string;
  ipAddress?: string;
  isAutoGenerated?: boolean;
  templateId?: string;
  validUntil?: string;
}

interface ContractTemplate {
  id: string;
  name: string;
  description: string;
  category: 'service' | 'maintenance' | 'consulting' | 'general';
  content: string;
  variables: string[];
  isActive: boolean;
  createdAt: string;
}

interface Signature {
  id: string;
  contractId: string;
  contractNumber: string;
  clientName: string;
  signerName: string;
  signerEmail: string;
  signedAt: string;
  ipAddress: string;
  userAgent: string;
  signatureHash: string;
  isValid: boolean;
}

// Mock data
const mockClients = [
  { id: '1', companyName: 'Transportes Maputo Lda', representative: 'João Macamo', email: 'joao@transportesmaputo.mz' },
  { id: '2', companyName: 'Construções Beira SA', representative: 'Maria Santos', email: 'maria@construcoesbeira.mz' },
  { id: '3', companyName: 'Hotel Polana', representative: 'Carlos Mendes', email: 'carlos@hotelpolana.mz' },
  { id: '4', companyName: 'Farmácia Central', representative: 'António Silva', email: 'antonio@farmaciacentral.mz' }
];

const mockSubscriptions = [
  { id: '1', clientId: '1', serviceId: '1', serviceName: 'Contabilidade Mensal', totalWithIva: 5800, status: 'active', nextBilling: '2024-05-01' },
  { id: '2', clientId: '1', serviceId: '2', serviceName: 'Auditoria Anual', totalWithIva: 17400, status: 'active', nextBilling: '2024-12-01' },
  { id: '3', clientId: '2', serviceId: '1', serviceName: 'Contabilidade Mensal', totalWithIva: 5800, status: 'active', nextBilling: '2024-04-15' },
  { id: '4', clientId: '3', serviceId: '3', serviceName: 'Consultoria Fiscal', totalWithIva: 10440, status: 'active', nextBilling: '2024-06-01' }
];

const mockContracts: Contract[] = [
  {
    id: '1',
    number: 'CONT-2024-001',
    clientId: '1',
    clientName: 'Transportes Maputo Lda',
    title: 'Contrato de Prestação de Serviços Contábeis',
    content: `<h2>CONTRATO DE PRESTAÇÃO DE SERVIÇOS</h2>
    <p><strong>CONTRATANTE:</strong> Transportes Maputo Lda</p>
    <p><strong>CONTRATADA:</strong> TechSolutions Lda</p>
    <p><strong>OBJETO:</strong> Prestação de serviços de contabilidade mensal</p>
    <p><strong>VALOR:</strong> 5.800,00 MT mensais</p>
    <p><strong>VIGÊNCIA:</strong> 12 meses a partir da assinatura</p>`,
    value: 69600,
    status: 'signed',
    createdAt: '2024-01-15',
    sentAt: '2024-01-16',
    signedAt: '2024-01-18',
    signerName: 'João Macamo',
    signerEmail: 'joao@transportesmaputo.mz',
    signatureHash: 'a1b2c3d4e5f6789012345678901234567890abcdef',
    ipAddress: '197.218.45.123',
    validUntil: '2025-01-18'
  },
  {
    id: '2',
    number: 'CONT-2024-002',
    clientId: '2',
    clientName: 'Construções Beira SA',
    title: 'Contrato de Auditoria Anual',
    content: `<h2>CONTRATO DE AUDITORIA</h2>
    <p><strong>CONTRATANTE:</strong> Construções Beira SA</p>
    <p><strong>CONTRATADA:</strong> TechSolutions Lda</p>
    <p><strong>OBJETO:</strong> Auditoria externa das demonstrações financeiras</p>
    <p><strong>VALOR:</strong> 17.400,00 MT</p>
    <p><strong>VIGÊNCIA:</strong> Até 31 de dezembro de 2024</p>`,
    value: 17400,
    status: 'sent',
    createdAt: '2024-02-01',
    sentAt: '2024-02-02',
    validUntil: '2024-12-31'
  },
  {
    id: '3',
    number: 'CONT-2024-003',
    clientId: '3',
    clientName: 'Hotel Polana',
    title: 'Contrato de Consultoria Fiscal',
    content: `<h2>CONTRATO DE CONSULTORIA</h2>
    <p><strong>CONTRATANTE:</strong> Hotel Polana</p>
    <p><strong>CONTRATADA:</strong> TechSolutions Lda</p>
    <p><strong>OBJETO:</strong> Consultoria fiscal especializada</p>
    <p><strong>VALOR:</strong> 10.440,00 MT semestrais</p>
    <p><strong>VIGÊNCIA:</strong> 6 meses renováveis</p>`,
    value: 10440,
    status: 'draft',
    createdAt: '2024-03-01',
    validUntil: '2024-09-01'
  }
];

const mockTemplates: ContractTemplate[] = [
  {
    id: '1',
    name: 'Contrato de Contabilidade',
    description: 'Template para serviços de contabilidade mensal',
    category: 'service',
    content: `<h2>CONTRATO DE PRESTAÇÃO DE SERVIÇOS CONTÁBEIS</h2>
    
    <p>Pelo presente instrumento, <strong>{empresa_nome}</strong>, pessoa jurídica de direito privado, inscrita no NUIT sob o nº {empresa_nuit}, com sede em {empresa_endereco}, doravante denominada <strong>CONTRATANTE</strong>, e <strong>{prestador_nome}</strong>, inscrita no NUIT sob o nº {prestador_nuit}, com sede em {prestador_endereco}, doravante denominada <strong>CONTRATADA</strong>, têm entre si justo e acordado o seguinte:</p>
    
    <h3>CLÁUSULA 1ª - DO OBJETO</h3>
    <p>O presente contrato tem por objeto a prestação de serviços de {servico_nome} pela CONTRATADA em favor da CONTRATANTE.</p>
    
    <h3>CLÁUSULA 2ª - DO VALOR E FORMA DE PAGAMENTO</h3>
    <p>Pelos serviços prestados, a CONTRATANTE pagará à CONTRATADA o valor de <strong>{servico_valor} MT</strong> ({servico_valor_extenso}), a ser pago mensalmente até o dia {dia_vencimento} de cada mês.</p>
    
    <h3>CLÁUSULA 3ª - DA VIGÊNCIA</h3>
    <p>O presente contrato terá vigência de {vigencia_meses} meses, iniciando-se em {data_inicio} e terminando em {data_fim}, podendo ser renovado por igual período mediante acordo entre as partes.</p>
    
    <h3>CLÁUSULA 4ª - DAS OBRIGAÇÕES DA CONTRATADA</h3>
    <p>A CONTRATADA obriga-se a:</p>
    <ul>
      <li>Executar os serviços com qualidade e pontualidade;</li>
      <li>Manter sigilo sobre as informações da CONTRATANTE;</li>
      <li>Cumprir os prazos estabelecidos;</li>
      <li>Fornecer relatórios mensais quando solicitado.</li>
    </ul>
    
    <h3>CLÁUSULA 5ª - DAS OBRIGAÇÕES DA CONTRATANTE</h3>
    <p>A CONTRATANTE obriga-se a:</p>
    <ul>
      <li>Efetuar o pagamento na data acordada;</li>
      <li>Fornecer todas as informações necessárias;</li>
      <li>Permitir acesso aos documentos contábeis;</li>
      <li>Comunicar alterações relevantes.</li>
    </ul>
    
    <p>E por estarem assim justos e contratados, assinam o presente contrato em duas vias de igual teor.</p>
    
    <p><strong>Maputo, {data_assinatura}</strong></p>
    
    <div style="margin-top: 50px;">
      <p>_________________________________</p>
      <p><strong>CONTRATANTE</strong></p>
      <p>{empresa_representante}</p>
      <p>{empresa_nome}</p>
    </div>
    
    <div style="margin-top: 30px;">
      <p>_________________________________</p>
      <p><strong>CONTRATADA</strong></p>
      <p>{prestador_representante}</p>
      <p>{prestador_nome}</p>
    </div>`,
    variables: ['{empresa_nome}', '{empresa_nuit}', '{servico_nome}', '{servico_valor}', '{vigencia_meses}'],
    isActive: true,
    createdAt: '2024-01-01'
  },
  {
    id: '2',
    name: 'Contrato de Auditoria',
    description: 'Template para serviços de auditoria externa',
    category: 'consulting',
    content: `<h2>CONTRATO DE AUDITORIA EXTERNA</h2>
    
    <p>Contrato de prestação de serviços de auditoria entre {empresa_nome} e {prestador_nome}.</p>
    
    <h3>OBJETO</h3>
    <p>Auditoria das demonstrações financeiras referentes ao exercício de {ano_exercicio}.</p>
    
    <h3>VALOR</h3>
    <p>Valor total de {servico_valor} MT, a ser pago conforme cronograma acordado.</p>
    
    <h3>PRAZO</h3>
    <p>O trabalho deverá ser concluído até {data_conclusao}.</p>`,
    variables: ['{empresa_nome}', '{prestador_nome}', '{ano_exercicio}', '{servico_valor}'],
    isActive: true,
    createdAt: '2024-01-01'
  }
];

const mockSignatures: Signature[] = [
  {
    id: '1',
    contractId: '1',
    contractNumber: 'CONT-2024-001',
    clientName: 'Transportes Maputo Lda',
    signerName: 'João Macamo',
    signerEmail: 'joao@transportesmaputo.mz',
    signedAt: '2024-01-18T14:30:00Z',
    ipAddress: '197.218.45.123',
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
    signatureHash: 'a1b2c3d4e5f6789012345678901234567890abcdef',
    isValid: true
  }
];

export const DigitalContracts: React.FC = () => {
  const [activeTab, setActiveTab] = useState('contracts');
  const [contracts, setContracts] = useState<Contract[]>(mockContracts);
  const [templates, setTemplates] = useState<ContractTemplate[]>(mockTemplates);
  const [signatures] = useState<Signature[]>(mockSignatures);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<'all' | 'draft' | 'sent' | 'signed' | 'cancelled'>('all');
  const [showAddModal, setShowAddModal] = useState(false);
  const [showAutoGenerateModal, setShowAutoGenerateModal] = useState(false);
  const [showTemplateModal, setShowTemplateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editingContract, setEditingContract] = useState<Contract | null>(null);
  const [editingTemplate, setEditingTemplate] = useState<ContractTemplate | null>(null);
  const [selectedClient, setSelectedClient] = useState<string>('');
  const [contractContent, setContractContent] = useState('');
  const [templateContent, setTemplateContent] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  const filteredContracts = contracts.filter(contract => {
    const matchesSearch = contract.clientName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         contract.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         contract.number.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = statusFilter === 'all' || contract.status === statusFilter;
    
    return matchesSearch && matchesStatus;
  });

  // Pagination
  const totalPages = Math.ceil(filteredContracts.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const paginatedContracts = filteredContracts.slice(startIndex, startIndex + itemsPerPage);

  // Reset to first page when filters change
  React.useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm, statusFilter]);

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('pt-PT');
  };

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      draft: { bg: 'bg-gray-100', text: 'text-gray-800', label: 'Rascunho' },
      sent: { bg: 'bg-blue-100', text: 'text-blue-800', label: 'Enviado' },
      signed: { bg: 'bg-green-100', text: 'text-green-800', label: 'Assinado' },
      cancelled: { bg: 'bg-red-100', text: 'text-red-800', label: 'Cancelado' }
    };
    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.draft;
    return (
      <span className={`px-2 py-1 text-xs font-semibold rounded-full ${config.bg} ${config.text}`}>
        {config.label}
      </span>
    );
  };

  const getCategoryBadge = (category: string) => {
    const categoryConfig = {
      service: { bg: 'bg-blue-100', text: 'text-blue-800', label: 'Serviço' },
      maintenance: { bg: 'bg-green-100', text: 'text-green-800', label: 'Manutenção' },
      consulting: { bg: 'bg-purple-100', text: 'text-purple-800', label: 'Consultoria' },
      general: { bg: 'bg-gray-100', text: 'text-gray-800', label: 'Geral' }
    };
    const config = categoryConfig[category as keyof typeof categoryConfig] || categoryConfig.general;
    return (
      <span className={`px-2 py-1 text-xs font-semibold rounded-full ${config.bg} ${config.text}`}>
        {config.label}
      </span>
    );
  };

  const getClientSubscriptions = (clientId: string) => {
    return mockSubscriptions.filter(sub => sub.clientId === clientId && sub.status === 'active');
  };

  const handleDownloadContract = (contract: Contract) => {
    const client = mockClients.find(c => c.id === contract.clientId);
    if (!client) return;

    const contractData = {
      number: contract.number,
      title: contract.title,
      content: contract.content,
      clientInfo: {
        companyName: client.companyName,
        representative: client.representative,
        email: client.email,
        phone: '+258 84 123 456',
        nuit: '400123456',
        address: 'Endereço do cliente'
      },
      value: contract.value,
      status: contract.status,
      createdAt: contract.createdAt,
      signedAt: contract.signedAt,
      signerName: contract.signerName
    };
    
    // Generate PDF using existing PDF generator
    const doc = new (window as any).jsPDF();
    
    // Header
    doc.setFontSize(20);
    doc.setFont('helvetica', 'bold');
    doc.text('CONTRATO DIGITAL', 20, 30);
    
    // Contract info
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text(`Número: ${contract.number}`, 20, 50);
    doc.text(`Cliente: ${contract.clientName}`, 20, 60);
    doc.text(`Valor: ${contract.value.toLocaleString()} MT`, 20, 70);
    doc.text(`Status: ${contract.status}`, 20, 80);
    
    // Content (simplified)
    doc.setFontSize(10);
    const contentLines = contract.content.replace(/<[^>]*>/g, '').split('\n');
    let yPos = 100;
    contentLines.forEach(line => {
      if (line.trim()) {
        doc.text(line.trim(), 20, yPos);
        yPos += 10;
      }
    });
    
    doc.save(`contrato-${contract.number}.pdf`);
    
    alert(`✅ Contrato baixado com sucesso!\n\n📄 Número: ${contract.number}\n👤 Cliente: ${contract.clientName}\n💰 Valor: ${contract.value.toLocaleString()} MT\n📅 Criado em: ${formatDate(contract.createdAt)}\n📁 Arquivo: contrato-${contract.number}.pdf`);
  };

  const handleEditContract = (contract: Contract) => {
    setEditingContract(contract);
    setContractContent(contract.content);
    setShowEditModal(true);
  };

  const handleSaveEdit = () => {
    if (!editingContract) return;

    setContracts(contracts.map(c => 
      c.id === editingContract.id 
        ? { ...c, content: contractContent }
        : c
    ));
    
    setShowEditModal(false);
    setEditingContract(null);
    alert(`✅ Contrato "${editingContract.number}" atualizado com sucesso!`);
  };

  const handleAutoGenerate = () => {
    setShowAutoGenerateModal(true);
  };

  const handleClientSelect = (clientId: string) => {
    setSelectedClient(clientId);
  };

  const handleGenerateFromSubscriptions = () => {
    const client = mockClients.find(c => c.id === selectedClient);
    const subscriptions = getClientSubscriptions(selectedClient);
    
    if (!client || subscriptions.length === 0) {
      alert('❌ Não é possível gerar contrato!\n\nMotivo: Cliente não possui subscrições ativas.\n\n💡 Para gerar um contrato automaticamente:\n1. O cliente deve ter pelo menos 1 subscrição ativa\n2. Vá para Subscrições → Nova Subscrição\n3. Crie uma subscrição para este cliente\n4. Retorne aqui para gerar o contrato');
      return;
    }

    const totalValue = subscriptions.reduce((sum, sub) => sum + sub.totalWithIva, 0);
    const servicesList = subscriptions.map(sub => sub.serviceName).join(', ');
    
    const autoContent = `<h2>CONTRATO DE PRESTAÇÃO DE SERVIÇOS</h2>
    
    <p><strong>CONTRATANTE:</strong> ${client.companyName}</p>
    <p><strong>REPRESENTANTE:</strong> ${client.representative}</p>
    <p><strong>EMAIL:</strong> ${client.email}</p>
    
    <p><strong>CONTRATADA:</strong> TechSolutions Lda</p>
    <p><strong>NUIT:</strong> 400123456</p>
    
    <h3>OBJETO DO CONTRATO</h3>
    <p>Prestação dos seguintes serviços:</p>
    <ul>
      ${subscriptions.map(sub => `<li>${sub.serviceName} - ${sub.totalWithIva.toLocaleString()} MT</li>`).join('')}
    </ul>
    
    <h3>VALOR TOTAL</h3>
    <p><strong>Valor Total: ${totalValue.toLocaleString()} MT</strong></p>
    <p>Pagamento conforme cronograma das subscrições ativas.</p>
    
    <h3>VIGÊNCIA</h3>
    <p>Contrato válido conforme vigência das subscrições contratadas.</p>
    <p>Próxima renovação: ${subscriptions[0]?.nextBilling ? formatDate(subscriptions[0].nextBilling) : 'A definir'}</p>
    
    <p><em>Contrato gerado automaticamente baseado nas subscrições ativas do cliente.</em></p>`;

    const newContract: Contract = {
      id: Date.now().toString(),
      number: `CONT-2024-${String(contracts.length + 1).padStart(3, '0')}`,
      clientId: selectedClient,
      clientName: client.companyName,
      title: `Contrato Automático - ${client.companyName}`,
      content: autoContent,
      value: totalValue,
      status: 'draft',
      createdAt: new Date().toISOString(),
      isAutoGenerated: true,
      validUntil: subscriptions[0]?.nextBilling
    };

    setContracts([newContract, ...contracts]);
    setShowAutoGenerateModal(false);
    setSelectedClient('');
    
    alert(`✅ Contrato gerado automaticamente!\n\n📄 Número: ${newContract.number}\n👤 Cliente: ${client.companyName}\n🛍️ Serviços: ${subscriptions.length}\n💰 Valor Total: ${totalValue.toLocaleString()} MT\n📅 Criado: ${formatDate(newContract.createdAt)}\n\n✏️ Você pode editar o contrato antes de enviar para assinatura.`);
  };

  const handleSendForSignature = (contractId: string) => {
    setContracts(contracts.map(c => 
      c.id === contractId 
        ? { 
            ...c, 
            status: 'sent',
            sentAt: new Date().toISOString()
          }
        : c
    ));
    
    const contract = contracts.find(c => c.id === contractId);
    alert(`📧 Contrato enviado para assinatura!\n\n📄 ${contract?.number}\n👤 Cliente: ${contract?.clientName}\n📧 Enviado para: ${mockClients.find(c => c.id === contract?.clientId)?.email}\n📅 Enviado em: ${new Date().toLocaleString('pt-PT')}\n\n⏰ O cliente receberá um email com o link para assinatura digital.`);
  };

  const handleSimulateSignature = (contractId: string) => {
    const contract = contracts.find(c => c.id === contractId);
    const client = mockClients.find(c => c.id === contract?.clientId);
    
    if (!contract || !client) return;

    const signatureHash = 'SHA256:' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
    
    setContracts(contracts.map(c => 
      c.id === contractId 
        ? { 
            ...c, 
            status: 'signed',
            signedAt: new Date().toISOString(),
            signerName: client.representative,
            signerEmail: client.email,
            signatureHash: signatureHash,
            ipAddress: '197.218.45.' + Math.floor(Math.random() * 255)
          }
        : c
    ));
    
    alert(`✅ Contrato assinado digitalmente!\n\n📄 ${contract.number}\n✍️ Assinado por: ${client.representative}\n📧 Email: ${client.email}\n🔐 Hash: ${signatureHash}\n📅 Data: ${new Date().toLocaleString('pt-PT')}\n🌐 IP: 197.218.45.${Math.floor(Math.random() * 255)}\n\n🔒 Assinatura criptograficamente segura!`);
  };

  const handleDeleteContract = (contractId: string) => {
    if (confirm('Tem certeza que deseja eliminar este contrato?')) {
      setContracts(contracts.filter(c => c.id !== contractId));
      alert('Contrato eliminado com sucesso!');
    }
  };

  const handleSaveContract = (contractData: any) => {
    const client = mockClients.find(c => c.id === contractData.clientId);
    if (!client) return;

    const newContract: Contract = {
      id: Date.now().toString(),
      number: `CONT-2024-${String(contracts.length + 1).padStart(3, '0')}`,
      clientId: contractData.clientId,
      clientName: client.companyName,
      title: contractData.title,
      content: contractData.content,
      value: contractData.value,
      status: 'draft',
      createdAt: new Date().toISOString(),
      validUntil: contractData.validUntil
    };

    setContracts([newContract, ...contracts]);
    setShowAddModal(false);
    
    alert(`✅ Novo contrato criado!\n\n📄 Número: ${newContract.number}\n👤 Cliente: ${client.companyName}\n💰 Valor: ${contractData.value.toLocaleString()} MT\n📅 Criado: ${formatDate(newContract.createdAt)}\n🟡 Status: Rascunho`);
  };

  const handleSaveTemplate = (templateData: any) => {
    if (editingTemplate) {
      setTemplates(templates.map(t => 
        t.id === editingTemplate.id 
          ? { ...t, ...templateData, content: templateContent }
          : t
      ));
      alert(`✅ Template "${templateData.name}" atualizado!`);
    } else {
      const newTemplate: ContractTemplate = {
        id: Date.now().toString(),
        name: templateData.name,
        description: templateData.description,
        category: templateData.category,
        content: templateContent,
        variables: templateContent.match(/\{[^}]+\}/g) || [],
        isActive: true,
        createdAt: new Date().toISOString()
      };
      setTemplates([newTemplate, ...templates]);
      alert(`✅ Novo template "${newTemplate.name}" criado!`);
    }
    setShowTemplateModal(false);
    setEditingTemplate(null);
    setTemplateContent('');
  };

  const renderContracts = () => (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-semibold text-gray-900">Gestão de Contratos</h3>
        <div className="flex gap-3">
          <button
            onClick={handleAutoGenerate}
            className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2"
          >
            <Zap size={16} />
            Gerar Automático
          </button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 mb-1">Total Contratos</p>
              <p className="text-2xl font-bold text-gray-900">{contracts.length}</p>
            </div>
            <div className="w-12 h-12 rounded-full flex items-center justify-center bg-blue-100 text-blue-600">
              <FileText size={24} />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 mb-1">Assinados</p>
              <p className="text-2xl font-bold text-gray-900">
                {contracts.filter(c => c.status === 'signed').length}
              </p>
            </div>
            <div className="w-12 h-12 rounded-full flex items-center justify-center bg-green-100 text-green-600">
              <CheckCircle size={24} />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 mb-1">Pendentes</p>
              <p className="text-2xl font-bold text-gray-900">
                {contracts.filter(c => c.status === 'sent').length}
              </p>
            </div>
            <div className="w-12 h-12 rounded-full flex items-center justify-center bg-orange-100 text-orange-600">
              <Clock size={24} />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 mb-1">Valor Total</p>
              <p className="text-2xl font-bold text-gray-900">
                {contracts.filter(c => c.status === 'signed').reduce((sum, c) => sum + c.value, 0).toLocaleString()} MT
              </p>
            </div>
            <div className="w-12 h-12 rounded-full flex items-center justify-center bg-emerald-100 text-emerald-600">
              <DollarSign size={24} />
            </div>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
          <input
            type="text"
            placeholder="Pesquisar contratos..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
        <select
          value={statusFilter}
          onChange={(e) => setStatusFilter(e.target.value as any)}
          className="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        >
          <option value="all">Todos os Status</option>
          <option value="draft">Rascunhos</option>
          <option value="sent">Enviados</option>
          <option value="signed">Assinados</option>
          <option value="cancelled">Cancelados</option>
        </select>
      </div>

      {/* Contracts Table */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Contrato</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Cliente</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Valor</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Criado</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Ações</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {paginatedContracts.map((contract) => (
                <tr key={contract.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4">
                    <div>
                      <div className="text-sm font-medium text-gray-900 flex items-center gap-2">
                        {contract.number}
                        {contract.isAutoGenerated && (
                          <span className="px-2 py-1 text-xs bg-purple-100 text-purple-800 rounded-full">
                            Auto
                          </span>
                        )}
                      </div>
                      <div className="text-sm text-gray-500">{contract.title}</div>
                    </div>
                  </td>
                  <td className="px-6 py-4 text-sm text-gray-900">{contract.clientName}</td>
                  <td className="px-6 py-4 text-sm text-gray-900">{contract.value.toLocaleString()} MT</td>
                  <td className="px-6 py-4">{getStatusBadge(contract.status)}</td>
                  <td className="px-6 py-4 text-sm text-gray-900">{formatDate(contract.createdAt)}</td>
                  <td className="px-6 py-4">
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleDownloadContract(contract)}
                        className="text-green-600 hover:text-green-900 p-1 hover:bg-green-50 rounded"
                        title="Download PDF"
                      >
                        <Download size={16} />
                      </button>
                      <button
                        onClick={() => handleEditContract(contract)}
                        className="text-blue-600 hover:text-blue-900 p-1 hover:bg-blue-50 rounded"
                        title="Editar"
                      >
                        <Edit size={16} />
                      </button>
                      {contract.status === 'draft' && (
                        <button
                          onClick={() => handleSendForSignature(contract.id)}
                          className="text-purple-600 hover:text-purple-900 p-1 hover:bg-purple-50 rounded"
                          title="Enviar para assinatura"
                        >
                          <Send size={16} />
                        </button>
                      )}
                      {contract.status === 'sent' && (
                        <button
                          onClick={() => handleSimulateSignature(contract.id)}
                          className="text-green-600 hover:text-green-900 p-1 hover:bg-green-50 rounded"
                          title="Simular assinatura"
                        >
                          <PenTool size={16} />
                        </button>
                      )}
                      <button
                        onClick={() => handleDeleteContract(contract.id)}
                        className="text-red-600 hover:text-red-900 p-1 hover:bg-red-50 rounded"
                        title="Eliminar"
                      >
                        <Trash2 size={16} />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        <Pagination
          currentPage={currentPage}
          totalPages={totalPages}
          onPageChange={setCurrentPage}
          totalItems={filteredContracts.length}
          itemsPerPage={itemsPerPage}
        />
      </div>
    </div>
  );

  const renderTemplates = () => (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-semibold text-gray-900">Templates de Contratos</h3>
        <button
          onClick={() => {
            setEditingTemplate(null);
            setTemplateContent('');
            setShowTemplateModal(true);
          }}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
        >
          <Plus size={16} />
          Novo Template
        </button>
      </div>

      {/* Templates Grid */}
      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        {templates.map((template) => (
          <div key={template.id} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <div className="flex items-start justify-between mb-4">
              <div>
                <h4 className="font-semibold text-gray-900 mb-1">{template.name}</h4>
                <p className="text-sm text-gray-600 mb-2">{template.description}</p>
                {getCategoryBadge(template.category)}
              </div>
              <span className={`px-2 py-1 text-xs font-semibold rounded-full ${
                template.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
              }`}>
                {template.isActive ? 'Ativo' : 'Inativo'}
              </span>
            </div>

            <div className="mb-4">
              <p className="text-xs font-medium text-gray-700 mb-2">Variáveis ({template.variables.length}):</p>
              <div className="flex flex-wrap gap-1">
                {template.variables.slice(0, 3).map((variable, idx) => (
                  <span key={idx} className="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded">
                    {variable}
                  </span>
                ))}
                {template.variables.length > 3 && (
                  <span className="text-xs text-gray-500">+{template.variables.length - 3}</span>
                )}
              </div>
            </div>

            <div className="flex gap-2">
              <button
                onClick={() => {
                  setEditingTemplate(template);
                  setTemplateContent(template.content);
                  setShowTemplateModal(true);
                }}
                className="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2"
              >
                <Edit size={16} />
                Editar
              </button>
              <button className="border border-gray-300 text-gray-700 py-2 px-3 rounded-lg hover:bg-gray-50 transition-colors">
                <Eye size={16} />
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderSignatures = () => (
    <div className="space-y-6">
      {/* Signature Analytics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 mb-1">Total Assinaturas</p>
              <p className="text-2xl font-bold text-gray-900">{signatures.length}</p>
            </div>
            <div className="w-12 h-12 rounded-full flex items-center justify-center bg-blue-100 text-blue-600">
              <PenTool size={24} />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 mb-1">Taxa de Assinatura</p>
              <p className="text-2xl font-bold text-gray-900">
                {((signatures.length / contracts.filter(c => c.status !== 'draft').length) * 100).toFixed(1)}%
              </p>
            </div>
            <div className="w-12 h-12 rounded-full flex items-center justify-center bg-green-100 text-green-600">
              <Target size={24} />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 mb-1">Tempo Médio</p>
              <p className="text-2xl font-bold text-gray-900">2.3h</p>
            </div>
            <div className="w-12 h-12 rounded-full flex items-center justify-center bg-purple-100 text-purple-600">
              <Clock size={24} />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 mb-1">Válidas</p>
              <p className="text-2xl font-bold text-gray-900">
                {signatures.filter(s => s.isValid).length}
              </p>
            </div>
            <div className="w-12 h-12 rounded-full flex items-center justify-center bg-emerald-100 text-emerald-600">
              <Shield size={24} />
            </div>
          </div>
        </div>
      </div>

      {/* Recent Signatures */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Assinaturas Recentes</h3>
        <div className="space-y-4">
          {signatures.map((signature) => (
            <div key={signature.id} className="border border-gray-200 rounded-lg p-4">
              <div className="flex items-center justify-between mb-3">
                <div>
                  <h4 className="font-semibold text-gray-900">{signature.contractNumber}</h4>
                  <p className="text-sm text-gray-600">{signature.clientName}</p>
                </div>
                <div className="text-right">
                  <span className={`px-2 py-1 text-xs font-semibold rounded-full ${
                    signature.isValid ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                  }`}>
                    {signature.isValid ? 'Válida' : 'Inválida'}
                  </span>
                </div>
              </div>

              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                <div>
                  <p className="text-gray-600">Assinado por:</p>
                  <p className="font-medium">{signature.signerName}</p>
                </div>
                <div>
                  <p className="text-gray-600">Data:</p>
                  <p className="font-medium">{formatDate(signature.signedAt)}</p>
                </div>
                <div>
                  <p className="text-gray-600">IP:</p>
                  <p className="font-medium">{signature.ipAddress}</p>
                </div>
                <div>
                  <p className="text-gray-600">Hash:</p>
                  <p className="font-mono text-xs">{signature.signatureHash.substring(0, 16)}...</p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Signature Verification */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
          <Shield className="text-green-600" size={20} />
          Verificação de Assinatura
        </h3>
        <div className="flex gap-4">
          <input
            type="text"
            placeholder="Digite o número do contrato para verificar..."
            className="flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          <button
            onClick={() => alert('🔍 Verificação de assinatura:\n\n✅ Assinatura válida\n🔐 Hash verificado\n📅 Data: 18/01/2024 14:30\n🌐 IP: 197.218.45.123\n✍️ Assinado por: João Macamo')}
            className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2"
          >
            <Hash size={16} />
            Verificar
          </button>
        </div>
      </div>
    </div>
  );

  const tabs = [
    { id: 'contracts', label: 'Contratos', icon: FileText },
    { id: 'templates', label: 'Templates', icon: Edit },
    { id: 'signatures', label: 'Assinaturas', icon: PenTool }
  ];

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h2 className="text-2xl font-bold text-gray-900 mb-4">Contratos Digitais</h2>
        
        {/* Navigation Tabs */}
        <div className="border-b border-gray-200">
          <nav className="flex space-x-8">
            {tabs.map((tab) => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors flex items-center gap-2 ${
                    activeTab === tab.id
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <Icon size={16} />
                  {tab.label}
                </button>
              );
            })}
          </nav>
        </div>
      </div>

      {/* Content */}
      {activeTab === 'contracts' && renderContracts()}
      {activeTab === 'templates' && renderTemplates()}
      {activeTab === 'signatures' && renderSignatures()}

      {/* Auto Generate Modal */}
      {showAutoGenerateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-6 max-w-2xl w-full mx-4">
            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
              <Zap className="text-green-600" size={20} />
              Gerar Contrato Automático
            </h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Selecionar Cliente
                </label>
                <select
                  value={selectedClient}
                  onChange={(e) => handleClientSelect(e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="">Escolher cliente...</option>
                  {mockClients.map((client) => (
                    <option key={client.id} value={client.id}>
                      {client.companyName} - {client.representative}
                    </option>
                  ))}
                </select>
              </div>

              {/* Preview Subscriptions */}
              {selectedClient && (
                <div className="bg-gray-50 rounded-lg p-4">
                  <h4 className="font-medium text-gray-900 mb-3">Subscrições Ativas:</h4>
                  {(() => {
                    const subscriptions = getClientSubscriptions(selectedClient);
                    if (subscriptions.length === 0) {
                      return (
                        <div className="text-center py-4">
                          <AlertCircle className="text-red-500 mx-auto mb-2" size={32} />
                          <p className="text-red-600 font-medium">Nenhuma subscrição ativa encontrada</p>
                          <p className="text-sm text-red-500 mt-1">
                            Este cliente precisa ter pelo menos uma subscrição ativa para gerar um contrato
                          </p>
                        </div>
                      );
                    }
                    
                    const totalValue = subscriptions.reduce((sum, sub) => sum + sub.totalWithIva, 0);
                    
                    return (
                      <div className="space-y-3">
                        {subscriptions.map((sub) => (
                          <div key={sub.id} className="flex items-center justify-between p-3 bg-white rounded border">
                            <div>
                              <p className="font-medium text-gray-900">{sub.serviceName}</p>
                              <p className="text-sm text-gray-600">Próxima cobrança: {formatDate(sub.nextBilling)}</p>
                            </div>
                            <div className="text-right">
                              <p className="font-bold text-gray-900">{sub.totalWithIva.toLocaleString()} MT</p>
                            </div>
                          </div>
                        ))}
                        <div className="border-t pt-3">
                          <div className="flex justify-between items-center">
                            <span className="font-bold text-gray-900">Total do Contrato:</span>
                            <span className="text-xl font-bold text-green-600">{totalValue.toLocaleString()} MT</span>
                          </div>
                        </div>
                      </div>
                    );
                  })()}
                </div>
              )}
            </div>
            
            <div className="flex gap-3 pt-4">
              <button
                onClick={() => {
                  setShowAutoGenerateModal(false);
                  setSelectedClient('');
                }}
                className="flex-1 border border-gray-300 text-gray-700 py-2 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancelar
              </button>
              <button
                onClick={handleGenerateFromSubscriptions}
                disabled={!selectedClient || getClientSubscriptions(selectedClient).length === 0}
                className="flex-1 bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
              >
                <Zap size={16} />
                Gerar Contrato
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Edit Contract Modal */}
      {showEditModal && editingContract && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl max-w-6xl w-full mx-4 h-[90vh] flex flex-col">
            {/* Header */}
            <div className="p-6 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">Editar Contrato</h3>
                  <p className="text-sm text-gray-600">{editingContract.number} - {editingContract.clientName}</p>
                </div>
                <div className="flex gap-3">
                  <button
                    onClick={handleSaveEdit}
                    className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2"
                  >
                    <Save size={16} />
                    Salvar
                  </button>
                  <button
                    onClick={() => setShowEditModal(false)}
                    className="text-gray-600 hover:text-gray-900 p-2"
                  >
                    <X size={20} />
                  </button>
                </div>
              </div>
            </div>

            <div className="flex-1 flex">
              {/* Editor */}
              <div className="flex-1 p-6">
                <HTMLEditor
                  value={contractContent}
                  onChange={setContractContent}
                  placeholder="Conteúdo do contrato..."
                  height="500px"
                />
              </div>

              {/* Contract Info Panel */}
              <div className="w-80 bg-gray-50 p-6 border-l border-gray-200">
                <h4 className="font-semibold text-gray-900 mb-4">Informações do Contrato</h4>
                <div className="space-y-4">
                  <div>
                    <p className="text-sm text-gray-600">Número</p>
                    <p className="font-medium">{editingContract.number}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Cliente</p>
                    <p className="font-medium">{editingContract.clientName}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Valor</p>
                    <p className="font-medium">{editingContract.value.toLocaleString()} MT</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Status</p>
                    {getStatusBadge(editingContract.status)}
                  </div>
                  {editingContract.isAutoGenerated && (
                    <div className="bg-purple-50 border border-purple-200 rounded-lg p-3">
                      <div className="flex items-center gap-2 mb-1">
                        <Zap className="text-purple-600" size={14} />
                        <span className="text-sm font-medium text-purple-900">Gerado Automaticamente</span>
                      </div>
                      <p className="text-xs text-purple-700">
                        Este contrato foi gerado automaticamente baseado nas subscrições ativas do cliente.
                      </p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Add Contract Modal */}
      {showAddModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-6 max-w-2xl w-full mx-4">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Novo Contrato</h3>
            
            <form onSubmit={(e) => {
              e.preventDefault();
              const formData = new FormData(e.currentTarget);
              const contractData = {
                clientId: formData.get('clientId') as string,
                title: formData.get('title') as string,
                content: formData.get('content') as string,
                value: Number(formData.get('value')),
                validUntil: formData.get('validUntil') as string
              };
              handleSaveContract(contractData);
            }} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Cliente</label>
                <select
                  name="clientId"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                >
                  <option value="">Selecionar cliente</option>
                  {mockClients.map((client) => (
                    <option key={client.id} value={client.id}>
                      {client.companyName} - {client.representative}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Título do Contrato</label>
                <input
                  type="text"
                  name="title"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Valor (MT)</label>
                  <input
                    type="number"
                    name="value"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Válido até</label>
                  <input
                    type="date"
                    name="validUntil"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Conteúdo</label>
                <textarea
                  name="content"
                  rows={8}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Conteúdo do contrato..."
                  required
                />
              </div>
              
              <div className="flex gap-3 pt-4">
                <button
                  type="button"
                  onClick={() => setShowAddModal(false)}
                  className="flex-1 border border-gray-300 text-gray-700 py-2 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Cancelar
                </button>
                <button
                  type="submit"
                  className="flex-1 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Criar Contrato
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Template Modal */}
      {showTemplateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl max-w-4xl w-full mx-4 h-[90vh] flex flex-col">
            <div className="p-6 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-semibold text-gray-900">
                  {editingTemplate ? 'Editar Template' : 'Novo Template'}
                </h3>
                <button
                  onClick={() => setShowTemplateModal(false)}
                  className="text-gray-600 hover:text-gray-900 p-2"
                >
                  <X size={20} />
                </button>
              </div>
            </div>

            <form onSubmit={(e) => {
              e.preventDefault();
              const formData = new FormData(e.currentTarget);
              const templateData = {
                name: formData.get('name') as string,
                description: formData.get('description') as string,
                category: formData.get('category') as 'service' | 'maintenance' | 'consulting' | 'general'
              };
              handleSaveTemplate(templateData);
            }} className="flex-1 flex flex-col">
              <div className="p-6 border-b border-gray-200">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Nome</label>
                    <input
                      type="text"
                      name="name"
                      defaultValue={editingTemplate?.name || ''}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Categoria</label>
                    <select
                      name="category"
                      defaultValue={editingTemplate?.category || 'service'}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="service">Serviço</option>
                      <option value="maintenance">Manutenção</option>
                      <option value="consulting">Consultoria</option>
                      <option value="general">Geral</option>
                    </select>
                  </div>
                  <div className="col-span-2">
                    <label className="block text-sm font-medium text-gray-700 mb-2">Descrição</label>
                    <input
                      type="text"
                      name="description"
                      defaultValue={editingTemplate?.description || ''}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      required
                    />
                  </div>
                </div>
              </div>

              <div className="flex-1 p-6">
                <label className="block text-sm font-medium text-gray-700 mb-2">Conteúdo do Template</label>
                <HTMLEditor
                  value={templateContent}
                  onChange={setTemplateContent}
                  placeholder="Digite o conteúdo do template..."
                  height="400px"
                />
              </div>

              <div className="p-6 border-t border-gray-200">
                <div className="flex gap-3">
                  <button
                    type="button"
                    onClick={() => setShowTemplateModal(false)}
                    className="flex-1 border border-gray-300 text-gray-700 py-2 rounded-lg hover:bg-gray-50 transition-colors"
                  >
                    Cancelar
                  </button>
                  <button
                    type="submit"
                    className="flex-1 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    {editingTemplate ? 'Atualizar' : 'Criar'} Template
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};